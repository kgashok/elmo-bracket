var _elm_community$elm_test$ElmTest_Assertion$AlwaysFail = function (a) {
	return {ctor: 'AlwaysFail', _0: a};
};
var _elm_community$elm_test$ElmTest_Assertion$AlwaysPass = {ctor: 'AlwaysPass'};
var _elm_community$elm_test$ElmTest_Assertion$AssertNotEqual = F3(
	function (a, b, c) {
		return {ctor: 'AssertNotEqual', _0: a, _1: b, _2: c};
	});
var _elm_community$elm_test$ElmTest_Assertion$assertNotEqual = F2(
	function (a, b) {
		return A3(
			_elm_community$elm_test$ElmTest_Assertion$AssertNotEqual,
			function (_p0) {
				return !_elm_lang$core$Native_Utils.eq(a, b);
			},
			_elm_lang$core$Basics$toString(a),
			_elm_lang$core$Basics$toString(b));
	});
var _elm_community$elm_test$ElmTest_Assertion$AssertEqual = F3(
	function (a, b, c) {
		return {ctor: 'AssertEqual', _0: a, _1: b, _2: c};
	});
var _elm_community$elm_test$ElmTest_Assertion$assertEqual = F2(
	function (a, b) {
		return A3(
			_elm_community$elm_test$ElmTest_Assertion$AssertEqual,
			function (_p1) {
				return _elm_lang$core$Native_Utils.eq(a, b);
			},
			_elm_lang$core$Basics$toString(a),
			_elm_lang$core$Basics$toString(b));
	});
var _elm_community$elm_test$ElmTest_Assertion$assertionList = F2(
	function (xs, ys) {
		return A3(_elm_lang$core$List$map2, _elm_community$elm_test$ElmTest_Assertion$assertEqual, xs, ys);
	});
var _elm_community$elm_test$ElmTest_Assertion$AssertFalse = function (a) {
	return {ctor: 'AssertFalse', _0: a};
};
var _elm_community$elm_test$ElmTest_Assertion$AssertTrue = function (a) {
	return {ctor: 'AssertTrue', _0: a};
};
var _elm_community$elm_test$ElmTest_Assertion$assertT = _elm_community$elm_test$ElmTest_Assertion$AssertTrue;
var _elm_community$elm_test$ElmTest_Assertion$assert = function (b) {
	return _elm_community$elm_test$ElmTest_Assertion$AssertTrue(
		function (_p2) {
			return b;
		});
};
