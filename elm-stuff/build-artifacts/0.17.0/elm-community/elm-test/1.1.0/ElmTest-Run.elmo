var _elm_community$elm_test$ElmTest_Run$failedSuites = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Report') {
		var _p2 = _p0._1;
		var failed = (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(_p2.failures),
			0) > 0) ? 1 : 0;
		return failed + function (_p1) {
			return _elm_lang$core$List$sum(
				A2(_elm_lang$core$List$map, _elm_community$elm_test$ElmTest_Run$failedSuites, _p1));
		}(_p2.results);
	} else {
		return 0;
	}
};
var _elm_community$elm_test$ElmTest_Run$passedSuites = function (result) {
	var _p3 = result;
	if (_p3.ctor === 'Report') {
		var _p5 = _p3._1;
		var passed = _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$List$length(_p5.failures),
			0) ? 1 : 0;
		return passed + function (_p4) {
			return _elm_lang$core$List$sum(
				A2(_elm_lang$core$List$map, _elm_community$elm_test$ElmTest_Run$passedSuites, _p4));
		}(_p5.results);
	} else {
		return 0;
	}
};
var _elm_community$elm_test$ElmTest_Run$failedTests = function (result) {
	var _p6 = result;
	switch (_p6.ctor) {
		case 'Pass':
			return 0;
		case 'Fail':
			return 1;
		default:
			return function (_p7) {
				return _elm_lang$core$List$sum(
					A2(_elm_lang$core$List$map, _elm_community$elm_test$ElmTest_Run$failedTests, _p7));
			}(_p6._1.results);
	}
};
var _elm_community$elm_test$ElmTest_Run$passedTests = function (result) {
	var _p8 = result;
	switch (_p8.ctor) {
		case 'Pass':
			return 1;
		case 'Fail':
			return 0;
		default:
			return function (_p9) {
				return _elm_lang$core$List$sum(
					A2(_elm_lang$core$List$map, _elm_community$elm_test$ElmTest_Run$passedTests, _p9));
			}(_p8._1.results);
	}
};
var _elm_community$elm_test$ElmTest_Run$pass = function (m) {
	var _p10 = m;
	switch (_p10.ctor) {
		case 'Pass':
			return true;
		case 'Fail':
			return false;
		default:
			return (_elm_lang$core$Native_Utils.cmp(
				_elm_lang$core$List$length(
					function (_) {
						return _.failures;
					}(_p10._1)),
				0) > 0) ? false : true;
	}
};
var _elm_community$elm_test$ElmTest_Run$fail = function (_p11) {
	return _elm_lang$core$Basics$not(
		_elm_community$elm_test$ElmTest_Run$pass(_p11));
};
var _elm_community$elm_test$ElmTest_Run$Summary = F3(
	function (a, b, c) {
		return {results: a, passes: b, failures: c};
	});
var _elm_community$elm_test$ElmTest_Run$Report = F2(
	function (a, b) {
		return {ctor: 'Report', _0: a, _1: b};
	});
var _elm_community$elm_test$ElmTest_Run$Fail = F2(
	function (a, b) {
		return {ctor: 'Fail', _0: a, _1: b};
	});
var _elm_community$elm_test$ElmTest_Run$Pass = function (a) {
	return {ctor: 'Pass', _0: a};
};
var _elm_community$elm_test$ElmTest_Run$run = function (test) {
	var _p12 = test;
	if (_p12.ctor === 'TestCase') {
		var _p14 = _p12._0;
		var runAssertion = F2(
			function (t, m) {
				return t(
					{ctor: '_Tuple0'}) ? _elm_community$elm_test$ElmTest_Run$Pass(_p14) : A2(_elm_community$elm_test$ElmTest_Run$Fail, _p14, m);
			});
		var _p13 = _p12._1;
		switch (_p13.ctor) {
			case 'AssertEqual':
				return A2(
					runAssertion,
					_p13._0,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Expected: ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p13._1,
							A2(_elm_lang$core$Basics_ops['++'], '; got: ', _p13._2))));
			case 'AssertNotEqual':
				return A2(
					runAssertion,
					_p13._0,
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p13._1,
						A2(_elm_lang$core$Basics_ops['++'], ' equals ', _p13._2)));
			case 'AssertTrue':
				return A2(runAssertion, _p13._0, 'not True');
			case 'AssertFalse':
				return A2(runAssertion, _p13._0, 'not False');
			case 'AlwaysPass':
				return A2(
					runAssertion,
					_elm_lang$core$Basics$always(true),
					'');
			default:
				return A2(
					runAssertion,
					_elm_lang$core$Basics$always(false),
					_p13._0);
		}
	} else {
		var results = A2(_elm_lang$core$List$map, _elm_community$elm_test$ElmTest_Run$run, _p12._1);
		var _p15 = A2(_elm_lang$core$List$partition, _elm_community$elm_test$ElmTest_Run$pass, results);
		var passes = _p15._0;
		var fails = _p15._1;
		return A2(
			_elm_community$elm_test$ElmTest_Run$Report,
			_p12._0,
			{results: results, passes: passes, failures: fails});
	}
};
