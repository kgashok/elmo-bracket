Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Bracket = Elm.Bracket.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $ElmTest = Elm.ElmTest.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var testm = _U.update($Bracket.initialModel,{expression: "()"});
   var tests = A2($ElmTest.suite,
   "My Test Suite",
   _U.list([A2($ElmTest.test,"Addition",A2($ElmTest.assertEqual,3 + 7,10))
           ,A2($ElmTest.test,"String.reverse",A2($ElmTest.assertEqual,"ekiM",$String.reverse("Mike")))
           ,A2($ElmTest.test,"This test should pass",$ElmTest.assert(true))
           ,A2($ElmTest.test,"This test should fail",$ElmTest.assert(false))
           ,A2($ElmTest.test,"Get enabled pair",A2($ElmTest.assertEqual,3,$List.length($Bracket.initialModel.bmap)))
           ,A2($ElmTest.test,"Test simple expression",A2($ElmTest.assertEqual,true,function (_) {    return _.isValid;}($Bracket.validateString(testm))))
           ,A2($ElmTest.test,
           "Test invalid expression",
           A2($ElmTest.assertEqual,false,function (_) {    return _.isValid;}($Bracket.validate(_U.update(testm,{expression: "({)"})))))
           ,A2($ElmTest.test,
           "Imbalanced expression must display as so",
           A2($ElmTest.assertEqual,"is imbalanced",$String.trimLeft($Bracket.isValid($Bracket.validate(_U.update(testm,{expression: "((({{"}))))))
           ,A2($ElmTest.test,
           "Invalid expression must display as so",
           A2($ElmTest.assertEqual,"is invalid",$String.trimLeft($Bracket.isValid($Bracket.validate(_U.update(testm,{expression: "(>)"}))))))]));
   var main = $ElmTest.elementRunner(tests);
   return _elm.Main.values = {_op: _op,testm: testm,tests: tests,main: main};
};