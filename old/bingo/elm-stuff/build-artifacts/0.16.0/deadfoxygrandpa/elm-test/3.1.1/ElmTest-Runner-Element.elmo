Elm.ElmTest = Elm.ElmTest || {};
Elm.ElmTest.Runner = Elm.ElmTest.Runner || {};
Elm.ElmTest.Runner.Element = Elm.ElmTest.Runner.Element || {};
Elm.ElmTest.Runner.Element.make = function (_elm) {
   "use strict";
   _elm.ElmTest = _elm.ElmTest || {};
   _elm.ElmTest.Runner = _elm.ElmTest.Runner || {};
   _elm.ElmTest.Runner.Element = _elm.ElmTest.Runner.Element || {};
   if (_elm.ElmTest.Runner.Element.values) return _elm.ElmTest.Runner.Element.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $ElmTest$Run = Elm.ElmTest.Run.make(_elm),
   $ElmTest$Runner$String = Elm.ElmTest.Runner.String.make(_elm),
   $ElmTest$Test = Elm.ElmTest.Test.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm),
   $Text = Elm.Text.make(_elm);
   var _op = {};
   var maxOrZero = function (l) {    return A3($List.foldl,$Basics.max,0,l);};
   var indent = function (s) {    var trimmed = $String.trimLeft(s);return $String.length(s) - $String.length(trimmed);};
   var red = A3($Color.rgb,255,126,132);
   var plainText = function (s) {    return $Graphics$Element.leftAligned($Text.fromString(s));};
   var pretty = function (_p0) {
      var _p1 = _p0;
      var _p5 = _p1._0;
      var _p4 = _p1._1;
      var w$ = 5;
      var w = indent(_p5) * 10;
      var _p2 = _p4;
      switch (_p2.ctor)
      {case "Pass": return A2($Graphics$Element.flow,
           $Graphics$Element.right,
           _U.list([A2($Graphics$Element.spacer,w,1),plainText(_p5),A2($Graphics$Element.spacer,w$,1)]));
         case "Fail": return A2($Graphics$Element.color,
           red,
           A2($Graphics$Element.flow,$Graphics$Element.right,_U.list([A2($Graphics$Element.spacer,w,1),plainText(_p5),A2($Graphics$Element.spacer,w$,1)])));
         default: var f = _U.cmp($ElmTest$Run.failedTests(_p4),0) > 0 ? $Graphics$Element.color(red) : $Basics.identity;
           return f(A2($Graphics$Element.flow,
           $Graphics$Element.right,
           _U.list([A2($Graphics$Element.spacer,w,1)
                   ,function (_p3) {
                      return $Graphics$Element.leftAligned($Text.bold($Text.fromString(_p3)));
                   }(_p5)
                   ,A2($Graphics$Element.spacer,w$,1)])));}
   };
   var runDisplay = function (tests) {
      var _p6 = $ElmTest$Runner$String.run(tests);
      if (_p6.ctor === "::" && _p6._0.ctor === "_Tuple2") {
            var _p8 = _p6._1;
            var results$ = A2($List.map,pretty,_p8);
            var maxWidth = function (_p7) {    return maxOrZero(A2($List.map,$Graphics$Element.widthOf,_p7));}(results$);
            var separator = A2($Graphics$Element.color,$Color.white,A2($Graphics$Element.spacer,maxWidth,1));
            var elements = _U.eq(_p8,_U.list([{ctor: "_Tuple2",_0: "",_1: _p6._0._1}])) ? _U.list([]) : A2($List.intersperse,
            separator,
            A2($List.map,function (elem) {    return A2($Graphics$Element.width,maxWidth,elem);},results$));
            return A2($Graphics$Element.flow,
            $Graphics$Element.down,
            A2($List._op["::"],plainText(_p6._0._0),A2($List._op["::"],A2($Graphics$Element.spacer,1,10),elements)));
         } else {
            return A2($Graphics$Element.flow,$Graphics$Element.down,_U.list([]));
         }
   };
   return _elm.ElmTest.Runner.Element.values = {_op: _op,runDisplay: runDisplay};
};