Elm.ElmTestBDDStyle = Elm.ElmTestBDDStyle || {};
Elm.ElmTestBDDStyle.make = function (_elm) {
   "use strict";
   _elm.ElmTestBDDStyle = _elm.ElmTestBDDStyle || {};
   if (_elm.ElmTestBDDStyle.values) return _elm.ElmTestBDDStyle.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Check$Investigator = Elm.Check.Investigator.make(_elm),
   $Check$Test = Elm.Check.Test.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $ElmTest = Elm.ElmTest.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var expectThat = F6(function ($function,_p1,checker,_p0,investigator,description) {
      return A6($Check$Test.test,description,$function,checker,investigator,100,$Random.initialSeed(1));
   });
   var itAlways = F2(function (description,expectation) {    return expectation(description);});
   var Word = {ctor: "Word"};
   var isTheSameAs = Word;
   var forEvery = Word;
   var toBeTruthy = $ElmTest.assert;
   var notToBe = $ElmTest.assertNotEqual;
   var toBe = $ElmTest.assertEqual;
   var expect = F2(function (actual,matchs) {    return matchs(actual);});
   var it = $ElmTest.test;
   var describe = $ElmTest.suite;
   return _elm.ElmTestBDDStyle.values = {_op: _op
                                        ,describe: describe
                                        ,it: it
                                        ,expect: expect
                                        ,toBe: toBe
                                        ,notToBe: notToBe
                                        ,toBeTruthy: toBeTruthy
                                        ,itAlways: itAlways
                                        ,expectThat: expectThat
                                        ,isTheSameAs: isTheSameAs
                                        ,forEvery: forEvery};
};